/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "product_",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency_",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "percent",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Fee",
        name: "fee_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.Ask",
        name: "ask_",
        type: "tuple",
      },
    ],
    name: "AskCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.Ask",
        name: "ask_",
        type: "tuple",
      },
    ],
    name: "AskRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.Bid",
        name: "bid_",
        type: "tuple",
      },
    ],
    name: "BidCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.Bid",
        name: "bid_",
        type: "tuple",
      },
    ],
    name: "BidFinalized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.Bid",
        name: "bid_",
        type: "tuple",
      },
    ],
    name: "BidRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "creator",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "owner",
            type: "tuple",
          },
        ],
        indexed: false,
        internalType: "struct IMarket.BidShares",
        name: "bidShares_",
        type: "tuple",
      },
    ],
    name: "BidShareUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Bid",
        name: "expectedBid_",
        type: "tuple",
      },
    ],
    name: "acceptBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "creator",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "owner",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.BidShares",
        name: "bidShares_",
        type: "tuple",
      },
    ],
    name: "areValidBidShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "bidSharesForToken",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "creator",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "owner",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.BidShares",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "currentAskForToken",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Ask",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "percent",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Fee",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "bidder_",
        type: "address",
      },
    ],
    name: "getBidFromBidder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Bid",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bidAmount_",
        type: "uint256",
      },
    ],
    name: "isValidBid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "product",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "removeAsk",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "bidder_",
        type: "address",
      },
    ],
    name: "removeBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Ask",
        name: "ask_",
        type: "tuple",
      },
    ],
    name: "setAsk",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct IMarket.Bid",
        name: "bid_",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "from_",
        type: "address",
      },
    ],
    name: "setBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "creator",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.D256",
            name: "owner",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.BidShares",
        name: "bidShares_",
        type: "tuple",
      },
    ],
    name: "setBidShares",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.D256",
        name: "sharePercent_",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "splitShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001de338038062001de3833981016040819052620000349162000127565b6000805460ff1916905580515115620000b45760208101516001600160a01b0316620000b45760405162461bcd60e51b815260206004820152602560248201527f4d61726b65743a20696e76616c69642066656520726563697069656e74206164604482015264647265737360d81b606482015260840160405180910390fd5b600080546001600160a01b0394851661010002610100600160a81b0319909116179055600280549284166001600160a01b0319938416179055805151600555602001516006805491909316911617905562000218565b80516001600160a01b03811681146200012257600080fd5b919050565b600080600083850360808112156200013d578384fd5b62000148856200010a565b935062000158602086016200010a565b9250603f190160408112156200016c578182fd5b604080519081016001600160401b03811182821017156200019b57634e487b7160e01b84526041600452602484fd5b6040526020821215620001ac578283fd5b620001b6620001e1565b915060408601518252818152620001d0606087016200010a565b602082015280925050509250925092565b604051602081016001600160401b03811182821017156200021257634e487b7160e01b600052604160045260246000fd5b60405290565b611bbb80620002286000396000f3fe608060405234801561001057600080fd5b50600436106100db5760003560e01c806302e8fe13146100e057806328220f35146101085780633b0352e41461011d5780633f4ba83a14610130578063578064f6146101385780635c975abb146101b157806362f24b70146101bc578063776a0835146101cf57806379cef8bd146101e25780638456cb59146102b357806385100850146102bb578063b920c123146102ce578063bd01ef4d146102ef578063bf9ce95214610302578063ddca3f4314610327578063f9ce058214610354578063f9d222bf14610374575b600080fd5b6100f36100ee36600461182d565b610387565b60405190151581526020015b60405180910390f35b61011b610116366004611709565b6103fe565b005b61011b61012b36600461179e565b6104bd565b61011b610578565b61018d610146366004611709565b604080518082019091526000808252602082015250600090815260046020908152604091829020825180840190935280548352600101546001600160a01b03169082015290565b60408051825181526020928301516001600160a01b031692810192909252016100ff565b60005460ff166100f3565b61011b6101ca366004611768565b6105ba565b61011b6101dd366004611739565b6106a6565b61026f6101f0366004611739565b6040805160808101825260008082526020820181905291810182905260608101919091525060009182526001602081815260408085206001600160a01b03948516865282529384902084516080810186528154815292810154841691830191909152600281015483169382019390935260039092015416606082015290565b6040516100ff9190815181526020808301516001600160a01b0390811691830191909152604080840151821690830152606092830151169181019190915260800190565b61011b610887565b61011b6102c93660046117ca565b6108c7565b6102e16102dc3660046116df565b610ab7565b6040519081526020016100ff565b6100f36102fd3660046116c4565b610ad6565b60005461031a9061010090046001600160a01b031681565b6040516100ff919061184e565b61032f610b09565b6040805182515181526020928301516001600160a01b031692810192909252016100ff565b610367610362366004611709565b610b3c565b6040516100ff9190611954565b61011b6103823660046117ed565b610b83565b60008061039384610b3c565b905061039e81610ad6565b6103c35760405162461bcd60e51b81526004016103ba906118a8565b60405180910390fd5b82158015906103f457506103db816020015184610ab7565b81516103e79085610ab7565b6103f191906119c9565b83145b9150505b92915050565b60005461010090046001600160a01b0316336001600160a01b0316146104365760405162461bcd60e51b81526004016103ba906118f3565b807fbf58f6d6c7d7c6efc69e7444efa93ed26d7cdc0e82e12a37df96f36a367561df600460008481526020019081526020016000206040516104919190815481526001909101546001600160a01b0316602082015260400190565b60405180910390a2600090815260046020526040812090815560010180546001600160a01b0319169055565b60005461010090046001600160a01b0316336001600160a01b0316146104f55760405162461bcd60e51b81526004016103ba906118f3565b6104fe81610ad6565b61051a5760405162461bcd60e51b81526004016103ba906118a8565b600082815260036020908152604091829020835151815590830151516001909101555182907f30752634c4278c3dd1a93f0638f727c03210e52d9f7acf5a93d7a463a437b96f9061056c908490611954565b60405180910390a25050565b60005461010090046001600160a01b0316336001600160a01b0316146105b05760405162461bcd60e51b81526004016103ba906118f3565b6105b86110d9565b565b60005461010090046001600160a01b0316336001600160a01b0316146105f25760405162461bcd60e51b81526004016103ba906118f3565b6105fd828235610387565b6106595760405162461bcd60e51b815260206004820152602760248201527f4d61726b65743a20696e76616c69642041736b20666f722073686172652d73706044820152666c697474696e6760c81b60648201526084016103ba565b600082815260046020526040902081906106738282611b38565b905050817ff7347cb9e91d8cbe995b51920ba5f92cbf84a9e09cbed3cd7a739fef4d1d07cf8260405161056c9190611926565b60005461010090046001600160a01b0316336001600160a01b0316146106de5760405162461bcd60e51b81526004016103ba906118f3565b60008281526001602081815260408084206001600160a01b0380871686529252909220805491810154909216816107535760405162461bcd60e51b815260206004820152601960248201527813585c9ad95d0e8818d85b9b9bdd081c995b5bdd9948189a59603a1b60448201526064016103ba565b604080518454815260018501546001600160a01b039081166020830152600286015481168284015260038601541660608201529051829187917fa4fba658c185c033488d787705db1bdd0f9086411cff4c65c3a4a296b90a32279181900360800190a260008681526001602081815260408084206001600160a01b03808b168652925280842093845591830180546001600160a01b031990811690915560028401805482169055600390930180549093169092555163a9059cbb60e01b81529082169063a9059cbb9061082c9088908790600401611862565b602060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906116a4565b50505050505050565b60005461010090046001600160a01b0316336001600160a01b0316146108bf5760405162461bcd60e51b81526004016103ba906118f3565b6105b8611166565b60005461010090046001600160a01b0316336001600160a01b0316146108ff5760405162461bcd60e51b81526004016103ba906118f3565b600082815260016020526040808220908290610921906060860190860161166c565b6001600160a01b039081168252602080830193909352604091820160002082516080810184528154808252600183015484169582019590955260028201548316938101939093526003015416606082015291506109905760405162461bcd60e51b81526004016103ba9061187b565b805182351480156109c557506109ac604083016020840161166c565b6001600160a01b031681602001516001600160a01b0316145b80156109f557506109dc608083016060840161166c565b6001600160a01b031681606001516001600160a01b0316145b610a3a5760405162461bcd60e51b815260206004820152601660248201527513585c9ad95d0e881d5b995e1c1958dd195908189a5960521b60448201526064016103ba565b610a48838260000151610387565b610aa45760405162461bcd60e51b815260206004820152602760248201527f4d61726b65743a20696e76616c69642042696420666f722073686172652d73706044820152666c697474696e6760c81b60648201526084016103ba565b610ab28382604001516111e1565b505050565b60006064610ac58385611478565b610acf91906119e1565b9392505050565b6000610ae46012600a611a44565b610aef906064611aec565b602083015151835151610b0291906119c9565b1492915050565b610b11611547565b50604080516060810182526005549181019182529081526006546001600160a01b0316602082015290565b610b44611567565b50600090815260036020908152604091829020825160608101845281548185019081528152835180840190945260019091015483529081019190915290565b60005461010090046001600160a01b0316336001600160a01b031614610bbb5760405162461bcd60e51b81526004016103ba906118f3565b6000610bcd606084016040850161166c565b6001600160a01b03161415610c1d5760405162461bcd60e51b815260206004820152601660248201527526b0b935b2ba1d1034b73b30b634b2103134b23232b960511b60448201526064016103ba565b8135610c3b5760405162461bcd60e51b81526004016103ba9061187b565b6000610c4d604084016020850161166c565b6001600160a01b03161415610c9f5760405162461bcd60e51b81526020600482015260186024820152774d61726b65743a20696e76616c69642063757272656e637960401b60448201526064016103ba565b6002546001600160a01b0316610cbb604084016020850161166c565b6001600160a01b031614610d115760405162461bcd60e51b815260206004820152601d60248201527f4d61726b65743a2063757272656e6379206e6f7420616363657074656400000060448201526064016103ba565b6000610d23608084016060850161166c565b6001600160a01b03161415610d7a5760405162461bcd60e51b815260206004820152601d60248201527f4d61726b65743a20696e76616c69642062696420726563697069656e7400000060448201526064016103ba565b600083815260016020526040808220908290610d9c906060870190870161166c565b6001600160a01b031681526020810191909152604001600020805490915015610dd357610dd3846101dd606086016040870161166c565b6000610de5604085016020860161166c565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e15919061184e565b60206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190611721565b6040516323b872dd60e01b81526001600160a01b03868116600483015230602483015287356044830152919250908316906323b872dd90606401602060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef191906116a4565b506040516370a0823160e01b81526000906001600160a01b038416906370a0823190610f2190309060040161184e565b60206040518083038186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190611721565b905060405180608001604052808383610f8a9190611b0b565b8152602001876020016020810190610fa2919061166c565b6001600160a01b03168152602001610fc06060890160408a0161166c565b6001600160a01b03168152602001610fde6080890160608a0161166c565b6001600160a01b03169052600088815260016020526040808220919061100a9060608b01908b0161166c565b6001600160a01b039081168252602080830193909352604091820160002084518155928401516001840180546001600160a01b0319908116928416929092179055848301516002850180548316918416919091179055606090940151600390930180549094169216919091179091555187907f052a2ac8735c2598d4b9577adfefb5ea183768839cbd625b7162cadc6656cf01906110a990899061196d565b60405180910390a26110bb8787611494565b1561087e5761087e876110d46060890160408a0161166c565b6111e1565b60005460ff166111225760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103ba565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161115c919061184e565b60405180910390a1565b60005460ff16156111ac5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103ba565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861114f3390565b60008281526001602081815260408084206001600160a01b03868116865290835281852082516080810184528154815294810154821685850190815260028201548316868501526003918201548316606087015288875293528185209251945491516331a9108f60e11b815260048101889052939492938382169263a9059cbb926101009091041690636352211e9060240160206040518083038186803b15801561128b57600080fd5b505afa15801561129f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c39190611688565b60408051602081019091526001860154815286516112e19190610ab7565b6040518363ffffffff1660e01b81526004016112fe929190611862565b602060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135091906116a4565b50806001600160a01b031663a9059cbb600060019054906101000a90046001600160a01b03166001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ae57600080fd5b505afa1580156113c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e69190611688565b60408051602081019091528554815286516114019190610ab7565b6040518363ffffffff1660e01b815260040161141e929190611862565b602060405180830381600087803b15801561143857600080fd5b505af115801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147091906116a4565b505050505050565b8051600090610acf90849061148f6012600a611a44565b611511565b6000828152600460205260408120600101546001600160a01b0316158015906114f25750600083815260046020908152604091829020600101546001600160a01b0316916114e79190850190850161166c565b6001600160a01b0316145b8015610acf575050600091825260046020526040909120549035101590565b600061152782611521868661152f565b9061153b565b949350505050565b6000610acf8284611aec565b6000610acf82846119e1565b604051806040016040528061155a61158c565b8152600060209091015290565b604051806040016040528061157a61158c565b815260200161158761158c565b905290565b6040518060200160405280600081525090565b6000604082840312156115b0578081fd5b604080519081016001600160401b03811182821017156115de57634e487b7160e01b83526041600452602483fd5b6040529050806115ee8484611620565b81526115fd8460208501611620565b60208201525092915050565b60006080828403121561161a578081fd5b50919050565b600060208284031215611631578081fd5b604051602081016001600160401b038111828210171561165f57634e487b7160e01b83526041600452602483fd5b6040529135825250919050565b60006020828403121561167d578081fd5b8135610acf81611b6d565b600060208284031215611699578081fd5b8151610acf81611b6d565b6000602082840312156116b5578081fd5b81518015158114610acf578182fd5b6000604082840312156116d5578081fd5b610acf838361159f565b600080604083850312156116f1578081fd5b6116fb8484611620565b946020939093013593505050565b60006020828403121561171a578081fd5b5035919050565b600060208284031215611732578081fd5b5051919050565b6000806040838503121561174b578182fd5b82359150602083013561175d81611b6d565b809150509250929050565b600080828403606081121561177b578283fd5b833592506040601f1982011215611790578182fd5b506020830190509250929050565b600080606083850312156117b0578182fd5b823591506117c1846020850161159f565b90509250929050565b60008060a083850312156117dc578182fd5b823591506117c18460208501611609565b600080600060c08486031215611801578081fd5b833592506118128560208601611609565b915060a084013561182281611b6d565b809150509250925092565b6000806040838503121561183f578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526013908201527213585c9ad95d0e881a5b9d985b1a5908189a59606a1b604082015260600190565b6020808252602b908201527f4d61726b65743a20696e76616c696420626964207368617265732c206d75737460408201526a02073756d20746f203130360ac1b606082015260800190565b6020808252601990820152784d61726b65743a2050726f647563742063616c6c206f6e6c7960381b604082015260600190565b8135815260408101602083013561193c81611b6d565b6001600160a01b031660209290920191909152919050565b8151518152602091820151519181019190915260400190565b8135815260808101602083013561198381611b6d565b6001600160a01b0390811660208401526040840135906119a282611b6d565b90811660408401526060840135906119b982611b6d565b8082166060850152505092915050565b600082198211156119dc576119dc611b22565b500190565b6000826119fc57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115611a3c578160001904821115611a2257611a22611b22565b80851615611a2f57918102915b93841c9390800290611a06565b509250929050565b6000610acf8383600082611a5a575060016103f8565b81611a67575060006103f8565b8160018114611a7d5760028114611a8757611aa3565b60019150506103f8565b60ff841115611a9857611a98611b22565b50506001821b6103f8565b5060208310610133831016604e8410600b8410161715611ac6575081810a6103f8565b611ad08383611a01565b8060001904821115611ae457611ae4611b22565b029392505050565b6000816000190483118215151615611b0657611b06611b22565b500290565b600082821015611b1d57611b1d611b22565b500390565b634e487b7160e01b600052601160045260246000fd5b81358155600181016020830135611b4e81611b6d565b81546001600160a01b0319166001600160a01b03919091161790555050565b6001600160a01b0381168114611b8257600080fd5b5056fea2646970667358221220f781877c9009a7968af55984e6e96a758bbd481eb3fe4f828a907cd5f9798a0c64736f6c63430008040033";

export class Market__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    product_: string,
    currency_: string,
    fee_: { percent: { value: BigNumberish }; recipient: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(
      product_,
      currency_,
      fee_,
      overrides || {}
    ) as Promise<Market>;
  }
  getDeployTransaction(
    product_: string,
    currency_: string,
    fee_: { percent: { value: BigNumberish }; recipient: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      product_,
      currency_,
      fee_,
      overrides || {}
    );
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
