/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "CountedTo",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x1d2c5790",
        type: "bytes32",
      },
    ],
    name: "c_0x1d2c5790",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5061097f806100246000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630bd8599e146100515780635fcbd5b61461006f5780637b1f91511461008d578063a87d942c146100a9575b600080fd5b6100596100c7565b60405161006691906107e7565b60405180910390f35b6100776103a5565b60405161008491906107e7565b60405180910390f35b6100a760048036038101906100a29190610729565b610683565b005b6100b1610686565b6040516100be91906107e7565b60405180910390f35b60006100f57f0d94d16f7dc0f97f1c2d462a883fc69b5352c96959001ace74126ba2499e5c6160001b610683565b6101217f8d46dd224c79b8746967c4dc6258712857be1fbda24be1275ef2eb602a531a9160001b610683565b61014d7fb5def0479a86ad60e4daa0d1f3723780e10fc08972938262febc09b7e2cd253e60001b610683565b6000600160005461015e9190610813565b905061018c7f3a3cb263781aed50c53900ae48d551d07382557bafde06d0c0498f60869d3a3a60001b610683565b6101b87f37a51b595205368eb4bd80bdf96eee9e307e8697591221d913bc2f6eb833914960001b610683565b6101e47f41fb8866366c490031eb9b924db3c8e928156f0f5df1e1a123938592c76c5b0460001b610683565b6000548111610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f906107c7565b60405180910390fd5b6102547f96999b40d6dafe62caf2866fc50203d8c8b83acb3c2ec89e0808010fe3ed0ce260001b610683565b6102807fdcc8c66e2a1d4a798aeb39585d2962787c5b73cc2eaa47d13259ea2841eb1b9360001b610683565b6102ac7f1fc8b9a5a7e85126790a454d3468dc83582d0fa06d58a87a4322fad5c3205f2f60001b610683565b806000819055506102df7f86eb5ea74f89b1496deb6c240720841fb21bad8a1ab2e5899279313c484f758d60001b610683565b61030b7f8724ce681f6d9222cba19bc8d21c94478ebbe543bda21d3ccf91a837f709d13a60001b610683565b7fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e6760005460405161033c91906107e7565b60405180910390a16103707f1055ce3ece3abfc63ec2f949f4723a62691ff1317cb83c6745a7dfa4ab79c85660001b610683565b61039c7fbaf56646ab320e9a6bf308e91fa65199d5710c170a744595d22eeb225a35cb8a60001b610683565b60005491505090565b60006103d37f2b0c41d3d4d1af3b2a7a22508d6e7ae6605d95b914cd6acc8bd78114e85b038f60001b610683565b6103ff7f754e52432543dda7f80b00405927e62f7bf11bbcfb07683ffff2d953a9e6cc1e60001b610683565b61042b7f148274954d574d5389cd1bc655de331b3e754d1b42cd19c47749a7a35b74f14c60001b610683565b6000600160005461043c9190610869565b905061046a7fe61fc5999cbec501377054cd5ad869b4b8680821bd88dee86e68aa744f6c291d60001b610683565b6104967f8a80ac97c6356dda28cd4b3a9d6a29e886e45faae63e54d599a84e1ea2e94ee560001b610683565b6104c27f28d6d8dab8b68ded80d1b2a9ebba28357d773c941981bf59e83cfa03bb1387cb60001b610683565b6000548110610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd906107a7565b60405180910390fd5b6105327f401ec6fd1d4750e2163b7f77ebb3e06aa49ee322e1d0f56024e44339119eca0a60001b610683565b61055e7fc9eea8274b25ab292ad7ac3a2649d8ece2957f6a483d664af0fc5c9acf0531a260001b610683565b61058a7f720dd4890ef203612ca125140bd470fad0d6a8e7980cc01ff786cad4c6e16dd660001b610683565b806000819055506105bd7f51201c67a0ae7f665d33d8fcdd498ec950c9f77d6f5ab1d7f8cce6369414c23a60001b610683565b6105e97febb9a8e62938c7a7eb92b4948d78973ea03d45ab7d9ce76ffccae4feea43c40860001b610683565b7fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e6760005460405161061a91906107e7565b60405180910390a161064e7f4d2c63adc9ca11e9b6d75cbc23ffac5a5bc917515bc718b50d33cb5c3c4c9f0e60001b610683565b61067a7fc421817feb6e92b11193840cd0c376d54ffd0bb6daa780afd9b8a80afb3a916f60001b610683565b60005491505090565b50565b60006106b47f8a05b92db4990cb39fac1ff4c60ca20e457d47a8deadb2c90eb859e15fd15a2960001b610683565b6106e07fb7cddaae02293cde98b49c538f25926eec61e05eda8b328814ca2b887814148e60001b610683565b61070c7f58586b41fb0c967d0e00fc1a78dd791dd4632abc26a4467ebb0367170cad4a7060001b610683565b600054905090565b60008135905061072381610932565b92915050565b60006020828403121561073b57600080fd5b600061074984828501610714565b91505092915050565b600061075f601183610802565b915061076a826108e0565b602082019050919050565b6000610782600f83610802565b915061078d82610909565b602082019050919050565b6107a1816108a7565b82525050565b600060208201905081810360008301526107c081610752565b9050919050565b600060208201905081810360008301526107e081610775565b9050919050565b60006020820190506107fc6000830184610798565b92915050565b600082825260208201905092915050565b600061081e826108a7565b9150610829836108a7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561085e5761085d6108b1565b5b828201905092915050565b6000610874826108a7565b915061087f836108a7565b925082821015610892576108916108b1565b5b828203905092915050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f75696e7432353620756e646572666c6f77000000000000000000000000000000600082015250565b7f75696e323536206f766572666c6f770000000000000000000000000000000000600082015250565b61093b8161089d565b811461094657600080fd5b5056fea264697066735822122037c9307f72fbb70c4393db74181a891fdc13b2289f9f66b7049b53ee84f917a564736f6c63430008040033";

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
